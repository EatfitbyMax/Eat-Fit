
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const VPS_CONFIG = {
  host: '51.178.29.220',
  user: 'ubuntu',
  appPath: '/home/ubuntu/eatfitbymax-server',
  port: 22
};

async function deployToVPS() {
  console.log('üöÄ D√©but du d√©ploiement sur le VPS Ubuntu...');
  
  try {
    // 1. Pr√©parer les fichiers pour le d√©ploiement
    console.log('üì¶ Pr√©paration des fichiers...');
    
    // Copier les fichiers du serveur vers un dossier temporaire
    const deployDir = path.join(__dirname, '../deploy-temp');
    
    // Cr√©er le dossier de d√©ploiement
    if (fs.existsSync(deployDir)) {
      await execCommand(`rm -rf ${deployDir}`);
    }
    await execCommand(`mkdir -p ${deployDir}`);
    
    // Copier les fichiers essentiels
    await execCommand(`cp -r server/* ${deployDir}/`);
    await execCommand(`cp .env ${deployDir}/.env`);
    
    console.log('‚úÖ Fichiers pr√©par√©s');
    
    // 2. Synchroniser avec le VPS
    console.log('üîÑ Synchronisation avec le VPS...');
    
    const rsyncCommand = `rsync -avz --delete ${deployDir}/ ${VPS_CONFIG.user}@${VPS_CONFIG.host}:${VPS_CONFIG.appPath}/`;
    await execCommand(rsyncCommand);
    
    console.log('‚úÖ Fichiers synchronis√©s');
    
    // 3. Installer les d√©pendances et red√©marrer le service sur le VPS
    console.log('üîß Installation des d√©pendances sur le VPS...');
    
    const sshCommands = [
      `cd ${VPS_CONFIG.appPath}`,
      'npm install --production',
      'pm2 stop eatfitbymax-server || true',
      'pm2 delete eatfitbymax-server || true',
      'pm2 start server.js --name "eatfitbymax-server" --env production',
      'pm2 save'
    ];
    
    const sshCommand = `ssh ${VPS_CONFIG.user}@${VPS_CONFIG.host} "${sshCommands.join(' && ')}"`;
    await execCommand(sshCommand);
    
    console.log('‚úÖ Application d√©ploy√©e et red√©marr√©e');
    
    // 4. Nettoyer les fichiers temporaires
    await execCommand(`rm -rf ${deployDir}`);
    
    console.log('üéâ D√©ploiement termin√© avec succ√®s !');
    console.log(`üåê Application accessible sur : http://${VPS_CONFIG.host}:5000`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
    process.exit(1);
  }
}

function execCommand(command) {
  return new Promise((resolve, reject) => {
    console.log(`Ex√©cution: ${command}`);
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error);
        return;
      }
      if (stdout) console.log(stdout);
      if (stderr) console.warn(stderr);
      resolve(stdout);
    });
  });
}

// Lancer le d√©ploiement si le script est ex√©cut√© directement
if (require.main === module) {
  deployToVPS();
}

module.exports = { deployToVPS };
