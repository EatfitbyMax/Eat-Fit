
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification pr√©-build EAS...');

// V√©rifier les fichiers critiques
const criticalFiles = [
  'app.json',
  'eas.json',
  'metro.config.js',
  'babel.config.js',
  'package.json',
  '.env'
];

let hasErrors = false;

criticalFiles.forEach(file => {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå Fichier manquant: ${file}`);
    hasErrors = true;
  } else {
    console.log(`‚úÖ ${file}`);
  }
});

// V√©rifier la structure app.json
try {
  const appConfig = JSON.parse(fs.readFileSync('app.json', 'utf8'));
  
  if (!appConfig.expo.name) {
    console.error('‚ùå expo.name manquant dans app.json');
    hasErrors = true;
  }
  
  if (!appConfig.expo.ios?.bundleIdentifier) {
    console.error('‚ùå ios.bundleIdentifier manquant dans app.json');
    hasErrors = true;
  }
  
  console.log('‚úÖ Structure app.json valide');
} catch (error) {
  console.error('‚ùå Erreur parsing app.json:', error.message);
  hasErrors = true;
}

// V√©rifier les variables d'environnement critiques
if (!process.env.EXPO_PUBLIC_API_URL) {
  console.warn('‚ö†Ô∏è EXPO_PUBLIC_API_URL non d√©finie');
}

if (hasErrors) {
  console.error('‚ùå Des erreurs ont √©t√© d√©tect√©es. Corrigez-les avant le build.');
  process.exit(1);
} else {
  console.log('‚úÖ Toutes les v√©rifications sont pass√©es!');
}
