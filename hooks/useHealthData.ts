
import { useEffect, useState, useCallback } from 'react';
import { Platform } from 'react-native';

// Import conditionnel pour √©viter les crashes sur Android/Web
let AppleHealthKit: any = null;
let Permissions: any = null;

try {
  if (Platform.OS === 'ios') {
    AppleHealthKit = require('react-native-health').default;
    Permissions = AppleHealthKit?.Constants?.Permissions;
  }
} catch (error) {
  console.log('‚ö†Ô∏è react-native-health non disponible:', error);
}

const useHealthData = (date: Date = new Date()) => {
  const [steps, setSteps] = useState(0);
  const [flights, setFlights] = useState(0);
  const [distance, setDistance] = useState(0);
  const [heartRate, setHeartRate] = useState(0);
  const [weight, setWeight] = useState<number | null>(null);
  const [activeEnergy, setActiveEnergy] = useState(0);
  const [sleepHours, setSleepHours] = useState(0);
  const [hasPermissions, setHasPermissions] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fonction pour v√©rifier si HealthKit est disponible
  const checkHealthKitAvailability = useCallback((): Promise<boolean> => {
    return new Promise((resolve) => {
      if (Platform.OS !== 'ios') {
        console.log('üì± Plateforme non-iOS d√©tect√©e');
        resolve(false);
        return;
      }

      if (!AppleHealthKit) {
        console.log('‚ùå AppleHealthKit non import√©');
        resolve(false);
        return;
      }

      try {
        AppleHealthKit.isAvailable((error: any, available: boolean) => {
          if (error) {
            console.log('‚ùå HealthKit non disponible:', error);
            resolve(false);
            return;
          }
          console.log('‚úÖ HealthKit disponible:', available);
          resolve(available || false);
        });
      } catch (err) {
        console.log('‚ùå Erreur lors de la v√©rification HealthKit:', err);
        resolve(false);
      }
    });
  }, []);

  // Fonction pour initialiser HealthKit avec permissions
  const initializeHealthKit = useCallback((): Promise<boolean> => {
    return new Promise((resolve) => {
      if (!AppleHealthKit || !Permissions) {
        console.log('‚ùå AppleHealthKit ou Permissions non disponibles');
        resolve(false);
        return;
      }

      const permissions = {
        permissions: {
          read: [
            Permissions.Steps,
            Permissions.FlightsClimbed,
            Permissions.DistanceWalkingRunning,
            Permissions.HeartRate,
            Permissions.Weight,
            Permissions.ActiveEnergyBurned,
            Permissions.SleepAnalysis,
          ],
          write: [
            Permissions.Weight,
            Permissions.ActiveEnergyBurned,
          ],
        },
      };

      console.log('üöÄ Initialisation HealthKit...');
      
      try {
        AppleHealthKit.initHealthKit(permissions, (err: any, results: any) => {
          console.log('üìû Callback initHealthKit re√ßu');
          
          if (err) {
            console.log('‚ùå Erreur initHealthKit:', err);
            setError(`Erreur HealthKit: ${err.message || 'Inconnue'}`);
            resolve(false);
            return;
          }
          
          console.log('‚úÖ HealthKit initialis√© avec succ√®s:', results);
          resolve(true);
        });
      } catch (error) {
        console.log('‚ùå Exception lors de l\'initialisation:', error);
        setError(`Exception HealthKit: ${error}`);
        resolve(false);
      }
    });
  }, []);

  // Effet principal d'initialisation
  useEffect(() => {
    let isMounted = true;

    const initHealthData = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // √âtape 1: V√©rifier la plateforme
        if (Platform.OS !== 'ios') {
          console.log('üì± Plateforme non-iOS, arr√™t de l\'initialisation');
          if (isMounted) {
            setIsLoading(false);
            setHasPermissions(false);
          }
          return;
        }

        // √âtape 2: V√©rifier la disponibilit√©
        const isAvailable = await checkHealthKitAvailability();
        if (!isAvailable) {
          console.log('‚ùå HealthKit non disponible sur cet appareil');
          if (isMounted) {
            setError('HealthKit non disponible sur cet appareil');
            setIsLoading(false);
            setHasPermissions(false);
          }
          return;
        }

        // √âtape 3: Initialiser avec permissions
        const hasPerms = await initializeHealthKit();
        if (isMounted) {
          setHasPermissions(hasPerms);
          setIsLoading(false);
          
          if (!hasPerms) {
            setError('Permissions HealthKit refus√©es ou non disponibles');
          }
        }

      } catch (error) {
        console.log('‚ùå Erreur g√©n√©rale d\'initialisation:', error);
        if (isMounted) {
          setError(`Erreur d'initialisation: ${error}`);
          setIsLoading(false);
          setHasPermissions(false);
        }
      }
    };

    // D√©lai pour permettre au composant de se monter compl√®tement
    const timer = setTimeout(initHealthData, 500);

    return () => {
      isMounted = false;
      clearTimeout(timer);
    };
  }, [checkHealthKitAvailability, initializeHealthKit]);

  // Effet pour r√©cup√©rer les donn√©es quand les permissions sont accord√©es
  useEffect(() => {
    if (!hasPermissions || Platform.OS !== 'ios' || !AppleHealthKit) {
      return;
    }

    const fetchHealthData = async () => {
      try {
        const options = {
          date: date.toISOString(),
        };

        // R√©cup√©rer les pas de mani√®re s√©curis√©e
        AppleHealthKit.getStepCount(options, (err: any, results: any) => {
          if (!err && results?.value) {
            console.log('üëü Pas r√©cup√©r√©s:', results.value);
            setSteps(results.value);
          }
        });

        // R√©cup√©rer les √©tages mont√©s
        AppleHealthKit.getFlightsClimbed(options, (err: any, results: any) => {
          if (!err && results?.value) {
            console.log('üè¢ √âtages mont√©s:', results.value);
            setFlights(results.value);
          }
        });

        // R√©cup√©rer la distance
        AppleHealthKit.getDistanceWalkingRunning(options, (err: any, results: any) => {
          if (!err && results?.value) {
            console.log('üö∂ Distance parcourue:', results.value);
            setDistance(results.value);
          }
        });

        // R√©cup√©rer les calories actives
        AppleHealthKit.getActiveEnergyBurned(options, (err: any, results: any) => {
          if (!err && results?.value) {
            console.log('üî• Calories actives:', results.value);
            setActiveEnergy(results.value);
          }
        });

        // R√©cup√©rer la fr√©quence cardiaque (derni√®re valeur)
        const heartRateOptions = {
          unit: 'bpm',
          startDate: new Date(date.getTime() - 24 * 60 * 60 * 1000).toISOString(),
          endDate: date.toISOString(),
          ascending: false,
          limit: 1,
        };

        AppleHealthKit.getHeartRateSamples(heartRateOptions, (err: any, results: any) => {
          if (!err && results && results.length > 0) {
            console.log('‚ù§Ô∏è Fr√©quence cardiaque:', results[0].value);
            setHeartRate(results[0].value);
          }
        });

        // R√©cup√©rer le poids (derni√®re valeur)
        const weightOptions = {
          unit: 'gram',
          startDate: new Date(date.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString(),
          endDate: date.toISOString(),
          ascending: false,
          limit: 1,
        };

        AppleHealthKit.getWeightSamples(weightOptions, (err: any, results: any) => {
          if (!err && results && results.length > 0) {
            const weightInKg = results[0].value / 1000;
            console.log('‚öñÔ∏è Poids:', weightInKg);
            setWeight(weightInKg);
          }
        });

      } catch (error) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
      }
    };

    fetchHealthData();
  }, [hasPermissions, date]);

  const writeWeight = useCallback((weightInKg: number): Promise<boolean> => {
    return new Promise((resolve) => {
      if (Platform.OS !== 'ios' || !hasPermissions || !AppleHealthKit) {
        resolve(false);
        return;
      }

      const options = {
        value: weightInKg * 1000, // Convertir en grammes
        date: new Date().toISOString(),
      };

      AppleHealthKit.saveWeight(options, (err: any, results: any) => {
        if (err) {
          console.log('‚ùå Erreur lors de l\'√©criture du poids:', err);
          resolve(false);
          return;
        }
        console.log('‚úÖ Poids √©crit dans HealthKit:', weightInKg);
        setWeight(weightInKg);
        resolve(true);
      });
    });
  }, [hasPermissions]);

  return {
    steps,
    flights,
    distance,
    heartRate,
    weight,
    activeEnergy,
    sleepHours,
    hasPermissions,
    isLoading,
    error,
    writeWeight,
  };
};

export default useHealthData;
