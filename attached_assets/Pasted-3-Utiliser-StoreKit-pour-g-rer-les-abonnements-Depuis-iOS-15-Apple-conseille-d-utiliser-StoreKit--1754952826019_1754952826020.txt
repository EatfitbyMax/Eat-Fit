3️⃣ Utiliser StoreKit pour gérer les abonnements
Depuis iOS 15, Apple conseille d’utiliser StoreKit 2 (plus simple que l’API historique).
Exemple Swift (StoreKit 2)
import StoreKit

@MainActor
class SubscriptionManager: ObservableObject {
    @Published var products: [Product] = []
    @Published var purchasedProductIDs: Set<String> = []

    func loadProducts() async {
        do {
            products = try await Product.products(for: [
                "com.monnomapp.premium1mois",
                "com.monnomapp.premium1an"
            ])
        } catch {
            print("Erreur lors du chargement des produits: \(error)")
        }
    }

    func purchase(_ product: Product) async {
        do {
            let result = try await product.purchase()
            switch result {
            case .success(let verification):
                if case .verified(let transaction) = verification {
                    purchasedProductIDs.insert(transaction.productID)
                    await transaction.finish()
                }
            case .userCancelled, .pending:
                break
            default:
                break
            }
        } catch {
            print("Erreur lors de l'achat: \(error)")
        }
    }

    func checkPurchases() async {
        for await result in Transaction.currentEntitlements {
            if case .verified(let transaction) = result {
                purchasedProductIDs.insert(transaction.productID)
            }
        }
    }
}
4️⃣ Restauration des achats
Apple impose que tu offres une option "Restaurer mes achats" pour les utilisateurs qui réinstallent l’app.
Avec StoreKit 2 :

func restorePurchases() async {
    await checkPurchases()
}
5️⃣ Tester tes abonnements
Dans App Store Connect → Users and Access → ajoute un Sandbox Tester.
Déconnecte ton Apple ID sur ton appareil.
Connecte-toi avec ton compte Sandbox dans Réglages → App Store.
Lance l’achat depuis l’app.
En sandbox, les abonnements se renouvellent très vite (1 semaine = 3 minutes environ).
6️⃣ Vérifier côté serveur (optionnel mais recommandé)
Pour plus de sécurité, il est préférable de vérifier les reçus côté serveur avec l’API d’Apple.
Ça permet d’éviter la triche et de savoir précisément la date d’expiration.