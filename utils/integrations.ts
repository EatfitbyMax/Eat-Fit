import { PersistentStorage } from './storage';
import { Platform } from 'react-native';
import * as AuthSession from 'expo-auth-session';
import * as WebBrowser from 'expo-web-browser';

// Configuration Strava s√©curis√©e pour la production
const STRAVA_CLIENT_ID = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID || '';
const STRAVA_CLIENT_SECRET = process.env.EXPO_PUBLIC_STRAVA_CLIENT_SECRET || '';

// Configuration du redirect URI selon l'environnement  
const getStravaRedirectUri = (): string => {
  // Utiliser l'URL du serveur Replit pour la coh√©rence
  return `${process.env.EXPO_PUBLIC_VPS_URL || 'https://eatfitbymax.cloud'}/strava-callback`;
};

const STRAVA_REDIRECT_URI = getStravaRedirectUri();

export interface IntegrationConfig {
  appleHealth: {
    connected: boolean;
    permissions: string[];
  };
  strava: {
    connected: boolean;
  };
}

export class IntegrationsManager {
  // M√©thodes pour Apple Health
  static async connectAppleHealth(userId: string, permissions?: string[]): Promise<boolean> {
    try {
      if (Platform.OS !== 'ios') {
        throw new Error('Apple Health est uniquement disponible sur iOS');
      }

      // Importer HealthKitService
      const HealthKitService = require('../utils/healthKit').default;
      
      // V√©rifier la disponibilit√© d'Apple Health
      const isAvailable = await HealthKitService.isAvailable();
      if (!isAvailable) {
        console.log('‚ö†Ô∏è Apple Health non disponible, connexion simul√©e');
        // En mode simulation, on autorise quand m√™me la connexion
        const status = await this.getIntegrationStatus(userId);
        status.appleHealth = {
          connected: true,
          lastSync: new Date().toISOString(),
          permissions: permissions || [
            'Steps',
            'ActiveEnergyBurned', 
            'HeartRate',
            'Weight',
            'DistanceWalkingRunning'
          ]
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);
        return true;
      }

      // Demander les permissions via HealthKitService
      console.log('üîê Demande des permissions Apple Health via HealthKitService...');
      const granted = await HealthKitService.requestPermissions();

      if (granted) {
        // Sauvegarder le statut de connexion
        const status = await this.getIntegrationStatus(userId);
        status.appleHealth = {
          connected: true,
          lastSync: new Date().toISOString(),
          permissions: permissions || [
            'Steps',
            'ActiveEnergyBurned',
            'HeartRate',
            'Weight',
            'DistanceWalkingRunning'
          ]
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);
        console.log('‚úÖ Apple Health connect√© avec succ√®s');
        return true;
      } else {
        console.log('‚ùå Permissions Apple Health refus√©es par l\'utilisateur');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erreur connexion Apple Health:', error);
      throw error;
    }
  }

  static async disconnectAppleHealth(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      status.appleHealth = {
        connected: false,
        permissions: []
      };
      await PersistentStorage.saveIntegrationStatus(userId, status);
      console.log('‚úÖ Apple Health d√©connect√©');
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion Apple Health:', error);
      throw new Error('Impossible de d√©connecter Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  static async syncAppleHealthData(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      if (!status.appleHealth.connected) {
        throw new Error('Apple Health non connect√©');
      }

      const AppleHealthKit = require('rn-apple-healthkit');

      // Obtenir les donn√©es des 7 derniers jours
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);

      // R√©cup√©rer les pas des 7 derniers jours
      const stepData: any[] = [];
      for (let i = 0; i < 7; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        
        const stepsForDay = await new Promise<number>((resolve) => {
          const options = {
            startDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).toISOString(),
            endDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1).toISOString(),
          };
          
          AppleHealthKit.getStepCount(options, (callbackError: any, results: any) => {
            resolve(callbackError ? 0 : results?.value || 0);
          });
        });

        stepData.push({
          startDate: currentDate.toISOString(),
          value: stepsForDay
        });
      }

      // R√©cup√©rer les donn√©es de fr√©quence cardiaque
      const heartRateData = await new Promise<any[]>((resolve) => {
        const options = {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString(),
          limit: 100,
        };
        
        AppleHealthKit.getHeartRateSamples(options, (callbackError: any, results: any) => {
          resolve(callbackError ? [] : results || []);
        });
      });

      // R√©cup√©rer les donn√©es de sommeil (pas directement support√© par rn-apple-healthkit de base)
      const sleepData: any[] = [];
      // Note: Les donn√©es de sommeil n√©cessitent une configuration sp√©ciale avec rn-apple-healthkit
      // Pour l'instant, on laisse le tableau vide

      // Organiser les donn√©es par date
      const healthDataByDate = {};

      // Traiter les pas
      stepData.forEach((entry: any) => {
        const date = new Date(entry.startDate).toISOString().split('T')[0];
        if (!healthDataByDate[date]) {
          healthDataByDate[date] = { date, steps: 0, heartRate: [], sleep: [] };
        }
        healthDataByDate[date].steps += entry.value || 0;
      });

      // Traiter la fr√©quence cardiaque
      heartRateData.forEach((entry: any) => {
        const date = new Date(entry.startDate).toISOString().split('T')[0];
        if (!healthDataByDate[date]) {
          healthDataByDate[date] = { date, steps: 0, heartRate: [], sleep: [] };
        }
        healthDataByDate[date].heartRate.push(entry.value);
      });

      // Traiter les donn√©es de sommeil
      // Les donn√©es de sommeil ne sont pas directement disponibles via rn-apple-healthkit
      // On peut ajouter cette fonctionnalit√© plus tard si n√©cessaire

      // Convertir en tableau et calculer les moyennes
      const processedData = Object.values(healthDataByDate).map((dayData: any) => ({
        date: dayData.date,
        steps: Math.round(dayData.steps),
        averageHeartRate: dayData.heartRate.length > 0 
          ? Math.round(dayData.heartRate.reduce((sum: number, hr: number) => sum + hr, 0) / dayData.heartRate.length)
          : 0,
        restingHeartRate: dayData.heartRate.length > 0 
          ? Math.min(...dayData.heartRate)
          : 0,
        sleepHours: dayData.sleep.reduce((total: number, sleep: any) => {
          const start = new Date(sleep.startDate);
          const end = new Date(sleep.endDate);
          return total + (end.getTime() - start.getTime()) / (1000 * 60 * 60);
        }, 0)
      }));

      // Sauvegarder sur le serveur uniquement
      await PersistentStorage.saveHealthData(userId, processedData);
      console.log('‚úÖ Donn√©es Apple Health synchronis√©es sur le serveur');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation Apple Health:', error);
      throw new Error('Impossible de synchroniser les donn√©es Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  // M√©thodes pour Strava
  static async connectStrava(userId: string): Promise<boolean> {
    try {
      const clientId = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID;

      if (!clientId) {
        throw new Error('Configuration Strava manquante');
      }

      // Cr√©er l'URL d'autorisation Strava
      const authUrl = `https://www.strava.com/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${STRAVA_REDIRECT_URI}&approval_prompt=force&scope=read,activity:read_all&state=${userId}`;

      console.log('üîó Ouverture de l\'autorisation Strava:', authUrl);

      // Ouvrir l'autorisation Strava avec une approche plus robuste
      const result = await WebBrowser.openAuthSessionAsync(
        authUrl, 
        STRAVA_REDIRECT_URI,
        {
          showInRecents: false,
          // Permettre √† l'utilisateur de revenir √† l'app
          presentationStyle: WebBrowser.WebBrowserPresentationStyle.FULL_SCREEN
        }
      );

      console.log('üîÑ R√©sultat WebBrowser:', result);

      if (result.type === 'success' && result.url) {
        const url = new URL(result.url);
        const code = url.searchParams.get('code');
        const state = url.searchParams.get('state');

        console.log('‚úÖ Code re√ßu depuis WebBrowser:', code ? code.substring(0, 10) + '...' : 'aucun');

        if (code && state === userId) {
          return await this.exchangeStravaCode(code, userId);
        }
      } else if (result.type === 'cancel') {
        console.log('üö´ Utilisateur a annul√© l\'autorisation Strava');
        return false;
      } else if (result.type === 'dismiss') {
        console.log('üì± WebBrowser ferm√©, v√©rification du statut Strava...');
        
        // Attendre un peu puis v√©rifier si la connexion a r√©ussi c√¥t√© serveur
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const serverStatus = await this.getStravaStatusFromServer(userId);
        if (serverStatus && serverStatus.connected) {
          console.log('‚úÖ Connexion Strava confirm√©e c√¥t√© serveur');
          
          // Mettre √† jour le statut local
          const status = await this.getIntegrationStatus(userId);
          status.strava = {
            connected: true,
            athlete: serverStatus.athlete
          };
          await PersistentStorage.saveIntegrationStatus(userId, status);
          
          return true;
        }
      }

      return false;
    } catch (error) {
      console.error('‚ùå Erreur connexion Strava:', error);
      throw new Error('Impossible de se connecter √† Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async exchangeStravaCode(code: string, userId: string): Promise<boolean> {
    try {
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';

      // Utiliser le serveur VPS pour l'√©change du token
      const response = await fetch(`${serverUrl}/api/strava/exchange-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: code,
          userId: userId
        })
      });

      if (!response.ok) {
        throw new Error('Erreur lors de l\'authentification Strava');
      }

      const result = await response.json();

      if (result.success) {
        // Mettre √† jour le statut local
        const status = await this.getIntegrationStatus(userId);
        status.strava = {
          connected: true,
          athlete: result.athlete
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);

        console.log('‚úÖ Strava connect√© via serveur VPS');
        return true;
      }

      return false;
    } catch (error) {
      console.error('‚ùå Erreur connexion Strava:', error);
      throw new Error('Impossible de se connecter √† Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async disconnectStrava(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      status.strava = {
        connected: false
      };
      await PersistentStorage.saveIntegrationStatus(userId, status);
      console.log('‚úÖ Strava d√©connect√©');
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion Strava:', error);
      throw new Error('Impossible de d√©connecter Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async refreshStravaToken(userId: string): Promise<string> {
    try {
      const status = await this.getIntegrationStatus(userId);

      if (!status.strava.connected || !status.strava.refreshToken) {
        throw new Error('Strava non connect√© ou token de rafra√Æchissement manquant');
      }

      const clientId = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID;
      const clientSecret = process.env.EXPO_PUBLIC_STRAVA_CLIENT_SECRET;

      const response = await fetch('https://www.strava.com/oauth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          client_id: clientId,
          client_secret: clientSecret,
          refresh_token: status.strava.refreshToken,
          grant_type: 'refresh_token'
        })
      });

      if (!response.ok) {
        throw new Error('Erreur lors du rafra√Æchissement du token Strava');
      }

      const tokenData = await response.json();

      // Mettre √† jour les tokens
      status.strava.accessToken = tokenData.access_token;
      status.strava.refreshToken = tokenData.refresh_token;
      status.strava.expiresAt = tokenData.expires_at;

      await PersistentStorage.saveIntegrationStatus(userId, status);

      return tokenData.access_token;
    } catch (error) {
      console.error('‚ùå Erreur rafra√Æchissement token Strava:', error);
      throw new Error('Impossible de rafra√Æchir le token Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async getValidStravaToken(userId: string): Promise<string> {
    try {
      const status = await this.getIntegrationStatus(userId);

      if (!status.strava.connected) {
        throw new Error('Strava non connect√©');
      }

      const now = Math.floor(Date.now() / 1000);
      if (status.strava.expiresAt && now >= status.strava.expiresAt - 300) {
        // Token expire dans 5 minutes ou moins, le rafra√Æchir
        return await this.refreshStravaToken(userId);
      }

      return status.strava.accessToken;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration token Strava:', error);
      throw new Error('Impossible de r√©cup√©rer le token Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async syncStravaActivities(userId: string): Promise<void> {
    try {
      const accessToken = await this.getValidStravaToken(userId);

      // R√©cup√©rer les activit√©s des 30 derniers jours
      const after = Math.floor((Date.now() - 30 * 24 * 60 * 60 * 1000) / 1000);

      const response = await fetch(`https://www.strava.com/api/v3/athlete/activities?after=${after}&per_page=100`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      if (!response.ok) {
        throw new Error('Erreur lors de la r√©cup√©ration des activit√©s Strava');
      }

      const activities = await response.json();

      // Traiter et formater les activit√©s
      const processedActivities = activities.map((activity: any) => ({
        id: activity.id,
        name: activity.name,
        type: activity.type,
        date: activity.start_date,
        duration: activity.moving_time,
        distance: activity.distance,
        elevationGain: activity.total_elevation_gain,
        averageHeartrate: activity.average_heartrate,
        maxHeartrate: activity.max_heartrate,
        averageSpeed: activity.average_speed,
        maxSpeed: activity.max_speed,
        calories: activity.kilojoules ? Math.round(activity.kilojoules * 0.239) : 0,
        kudosCount: activity.kudos_count,
        achievementCount: activity.achievement_count
      }));

      // Sauvegarder les activit√©s sur le serveur VPS uniquement
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';
      const saveResponse = await fetch(`${serverUrl}/api/strava/${userId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(processedActivities),
      });

      if (!saveResponse.ok) {
        throw new Error('Erreur sauvegarde activit√©s Strava');
      }

      console.log('‚úÖ Activit√©s Strava synchronis√©es sur le serveur');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation Strava:', error);
      throw new Error('Impossible de synchroniser les activit√©s Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async getStravaActivities(userId: string): Promise<any[]> {
    try {
      return await PersistentStorage.getStravaActivities(userId);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration activit√©s Strava:', error);
      throw new Error('Impossible de r√©cup√©rer les activit√©s Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async getHealthData(userId: string): Promise<any[]> {
    try {
      return await PersistentStorage.getHealthData(userId);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es Apple Health:', error);
      throw new Error('Impossible de r√©cup√©rer les donn√©es Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  static async getStravaStatusFromServer(userId: string): Promise<any> {
    try {
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';

      const response = await fetch(`${serverUrl}/api/strava/status/${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Statut Strava r√©cup√©r√© du serveur VPS:', data);
        return data;
      }

      return { connected: false };
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statut Strava du serveur:', error);
      return { connected: false };
    }
  }

  // M√©thodes g√©n√©rales
  static async getIntegrationStatus(userId: string): Promise<IntegrationConfig> {
    try {
      return await PersistentStorage.getUserIntegrationStatus(userId);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur r√©cup√©ration statuts int√©grations, utilisation des valeurs par d√©faut:', error?.message || error);

      // Retourner une configuration par d√©faut au lieu de lancer une erreur
      return {
        appleHealth: {
          connected: false,
          permissions: []
        },
        strava: {
          connected: false
        }
      };
    }
  }

  static async updateIntegrationStatus(userId: string, status: IntegrationConfig): Promise<void> {
    try {
      await PersistentStorage.saveIntegrationStatus(userId, status);
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour statuts int√©grations:', error);
      throw new Error('Impossible de mettre √† jour les statuts d\'int√©grations. V√©rifiez votre connexion internet.');
    }
  }
}

// Fonction principale pour synchroniser toutes les donn√©es
export async function syncWithExternalApps(userId: string): Promise<void> {
  try {
    console.log('üîÑ D√©but de la synchronisation compl√®te pour utilisateur:', userId);

    const integrationStatus = await IntegrationsManager.getIntegrationStatus(userId);
    const results = {
      appleHealth: false,
      strava: false
    };

    // Synchroniser Apple Health si connect√©
    if (integrationStatus.appleHealth.connected) {
      try {
        await IntegrationsManager.syncAppleHealthData(userId);
        results.appleHealth = true;
        console.log('‚úÖ Apple Health synchronis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur sync Apple Health:', error);
        throw error;
      }
    }

    // Synchroniser Strava si connect√©
    if (integrationStatus.strava.connected) {
      try {
        await IntegrationsManager.syncStravaActivities(userId);
        results.strava = true;
        console.log('‚úÖ Strava synchronis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur sync Strava:', error);
        throw error;
      }
    }

    console.log('Synchronisation compl√®te termin√©e pour utilisateur:', userId, results);

    if (!results.appleHealth && integrationStatus.appleHealth.connected) {
      console.warn('Apple Health connect√© mais synchronisation √©chou√©e');
    }
    if (!results.strava && integrationStatus.strava.connected) {
      console.warn('Strava connect√© mais synchronisation √©chou√©e');
    }
  } catch (error) {
    console.error('Erreur synchronisation compl√®te:', error);
    throw error;
  }
}

export const testServerConnection = async (serverUrl: string): Promise<boolean> => {
  try {
    console.log(`Test de connexion au serveur VPS: ${serverUrl}`);

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    const response = await fetch(`${serverUrl}/api/health`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    console.log(`‚ö†Ô∏è Erreur de connexion au serveur ${serverUrl}:`, error);
    return false;
  }
};

export interface IntegrationStatus {
  id: string;
  name: string;
  description: string;
  isConnected: boolean;
  icon: string;
  lastSync: Date | null;
}

export const getIntegrationStatuses = async (userId: string): Promise<IntegrationStatus[]> => {
  try {
    console.log('üîç R√©cup√©ration statuts int√©grations pour:', userId);

    // Tester d'abord la disponibilit√© du serveur avec un timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 secondes

    try {
      const testResponse = await fetch(`${process.env.EXPO_PUBLIC_VPS_URL}/api/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!testResponse.ok) {
        console.log('‚ö†Ô∏è Serveur non disponible, utilisation des donn√©es par d√©faut pour les int√©grations');
        return getDefaultIntegrationStatuses();
      }

      console.log('‚úÖ Serveur disponible pour les int√©grations');
    } catch (testError) {
      clearTimeout(timeoutId);
      console.log('‚ö†Ô∏è Test de connexion √©chou√©, utilisation des donn√©es par d√©faut pour les int√©grations');
      return getDefaultIntegrationStatuses();
    }

    // Pour l'instant, on retourne toujours les valeurs par d√©faut car l'endpoint n'existe pas encore
    console.log('üìã Utilisation des statuts d\'int√©grations par d√©faut');
    return getDefaultIntegrationStatuses();

  } catch (error) {
    console.log('‚ö†Ô∏è Erreur r√©cup√©ration int√©grations, utilisation des valeurs par d√©faut:', error?.message || error);
    return getDefaultIntegrationStatuses();
  }
};

// Fonction helper pour les valeurs par d√©faut
const getDefaultIntegrationStatuses = (): IntegrationStatus[] => {
  return [
    {
      id: 'strava',
      name: 'Strava',
      description: 'Synchronisation des activit√©s sportives',
      isConnected: false,
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      lastSync: null
    },
    {
      id: 'apple-health',
      name: 'Apple Health',
      description: 'Donn√©es de sant√© et fitness',
      isConnected: false,
      icon: '‚ù§Ô∏è',
      lastSync: null
    },
    {
      id: 'google-fit',
      name: 'Google Fit',
      description: 'Suivi d\'activit√© Google',
      isConnected: false,
      icon: 'üìä',
      lastSync: null
    }
  ];
};