import { PersistentStorage } from './storage';
import { Platform } from 'react-native';
import * as AuthSession from 'expo-auth-session';
import * as WebBrowser from 'expo-web-browser';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Configuration Strava s√©curis√©e pour la production
const STRAVA_CLIENT_ID = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID || '';
const STRAVA_CLIENT_SECRET = process.env.EXPO_PUBLIC_STRAVA_CLIENT_SECRET || '';

// Configuration du redirect URI selon l'environnement  
const getStravaRedirectUri = (): string => {
  // Utiliser l'URL du serveur Replit pour la coh√©rence
  return `${process.env.EXPO_PUBLIC_VPS_URL || 'https://eatfitbymax.cloud'}/strava-callback`;
};

const STRAVA_REDIRECT_URI = getStravaRedirectUri();

export interface IntegrationConfig {
  appleHealth: {
    connected: boolean;
    permissions: string[];
    lastSync?: string; // Ajout pour stocker la date du dernier sync
  };
  strava: {
    connected: boolean;
    athlete?: any; // Ajout pour stocker les infos de l'athl√®te
    accessToken?: string;
    refreshToken?: string;
    expiresAt?: number;
  };
}

// Interface pour les activit√©s Strava, utilis√©e dans getStravaActivities
interface StravaActivity {
  id: string;
  name: string;
  type: string;
  date: string;
  duration: number;
  distance: number;
  elevationGain: number;
  averageHeartrate: number | null;
  maxHeartrate: number | null;
  averageSpeed: number;
  maxSpeed: number;
  calories: number;
  kudosCount: number;
  achievementCount: number;
}

export class IntegrationsManager {
  // M√©thodes pour Apple Health
  static async connectAppleHealth(userId: string, permissions?: string[]): Promise<boolean> {
    try {
      if (Platform.OS !== 'ios') {
        throw new Error('Apple Health est uniquement disponible sur iOS');
      }

      console.log('üçé D√©but connexion Apple Health pour utilisateur:', userId);

      // Importer HealthKitService
      const HealthKitService = require('../utils/healthKit').default;

      // V√©rifier la disponibilit√© d'Apple Health
      console.log('üîç V√©rification disponibilit√© Apple Health...');
      const isAvailable = await HealthKitService.isAvailable();
      if (!isAvailable) {
        console.log('‚ùå Apple Health non disponible');
        throw new Error('Apple Health n\'est pas disponible sur cet appareil. V√©rifiez que l\'application Sant√© est install√©e et que HealthKit est support√©.');
      }

      // Demander les permissions via HealthKitService
      console.log('üîê Demande des permissions Apple Health...');
      const granted = await HealthKitService.requestPermissions();

      if (granted) {
        // Sauvegarder le statut de connexion
        const status = await this.getIntegrationStatus(userId);
        status.appleHealth = {
          connected: true,
          lastSync: new Date().toISOString(),
          permissions: permissions || [
            'Steps',
            'ActiveEnergyBurned',
            'HeartRate',
            'Weight',
            'DistanceWalkingRunning'
          ]
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);
        console.log('‚úÖ Apple Health connect√© avec succ√®s');
        return true;
      } else {
        console.log('‚ùå Permissions Apple Health refus√©es par l\'utilisateur');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erreur connexion Apple Health:', error);
      throw error;
    }
  }

  static async disconnectAppleHealth(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      status.appleHealth = {
        connected: false,
        permissions: []
      };
      await PersistentStorage.saveIntegrationStatus(userId, status);
      console.log('‚úÖ Apple Health d√©connect√©');
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion Apple Health:', error);
      throw new Error('Impossible de d√©connecter Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  static async syncAppleHealthData(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      if (!status.appleHealth.connected) {
        throw new Error('Apple Health non connect√©');
      }

      const AppleHealthKit = require('rn-apple-healthkit');

      // Obtenir les donn√©es des 7 derniers jours
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);

      // R√©cup√©rer les pas des 7 derniers jours
      const stepData: any[] = [];
      for (let i = 0; i < 7; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);

        const stepsForDay = await new Promise<number>((resolve) => {
          const options = {
            startDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).toISOString(),
            endDate: new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1).toISOString(),
          };

          AppleHealthKit.getStepCount(options, (callbackError: any, results: any) => {
            resolve(callbackError ? 0 : results?.value || 0);
          });
        });

        stepData.push({
          startDate: currentDate.toISOString(),
          value: stepsForDay
        });
      }

      // R√©cup√©rer les donn√©es de fr√©quence cardiaque
      const heartRateData = await new Promise<any[]>((resolve) => {
        const options = {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString(),
          limit: 100,
        };

        AppleHealthKit.getHeartRateSamples(options, (callbackError: any, results: any) => {
          resolve(callbackError ? [] : results || []);
        });
      });

      // R√©cup√©rer les donn√©es de sommeil (pas directement support√© par rn-apple-healthkit de base)
      const sleepData: any[] = [];
      // Note: Les donn√©es de sommeil n√©cessitent une configuration sp√©ciale avec rn-apple-healthkit
      // Pour l'instant, on laisse le tableau vide

      // Organiser les donn√©es par date
      const healthDataByDate = {};

      // Traiter les pas
      stepData.forEach((entry: any) => {
        const date = new Date(entry.startDate).toISOString().split('T')[0];
        if (!healthDataByDate[date]) {
          healthDataByDate[date] = { date, steps: 0, heartRate: [], sleep: [] };
        }
        healthDataByDate[date].steps += entry.value || 0;
      });

      // Traiter la fr√©quence cardiaque
      heartRateData.forEach((entry: any) => {
        const date = new Date(entry.startDate).toISOString().split('T')[0];
        if (!healthDataByDate[date]) {
          healthDataByDate[date] = { date, steps: 0, heartRate: [], sleep: [] };
        }
        healthDataByDate[date].heartRate.push(entry.value);
      });

      // Traiter les donn√©es de sommeil
      // Les donn√©es de sommeil ne sont pas directement disponibles via rn-apple-healthkit
      // On peut ajouter cette fonctionnalit√© plus tard si n√©cessaire

      // Convertir en tableau et calculer les moyennes
      const processedData = Object.values(healthDataByDate).map((dayData: any) => ({
        date: dayData.date,
        steps: Math.round(dayData.steps),
        averageHeartRate: dayData.heartRate.length > 0 
          ? Math.round(dayData.heartRate.reduce((sum: number, hr: number) => sum + hr, 0) / dayData.heartRate.length)
          : 0,
        restingHeartRate: dayData.heartRate.length > 0 
          ? Math.min(...dayData.heartRate)
          : 0,
        sleepHours: dayData.sleep.reduce((total: number, sleep: any) => {
          const start = new Date(sleep.startDate);
          const end = new Date(sleep.endDate);
          return total + (end.getTime() - start.getTime()) / (1000 * 60 * 60);
        }, 0)
      }));

      // Sauvegarder sur le serveur uniquement
      await PersistentStorage.saveHealthData(userId, processedData);
      console.log('‚úÖ Donn√©es Apple Health synchronis√©es sur le serveur');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation Apple Health:', error);
      throw new Error('Impossible de synchroniser les donn√©es Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  // M√©thodes pour Strava
  static async connectStrava(userId: string): Promise<boolean> {
    try {
      const clientId = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID;
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'https://eatfitbymax.cloud';

      console.log('üîç V√©rification configuration Strava...');
      console.log('Client ID pr√©sent:', !!clientId);
      console.log('Serveur URL:', serverUrl);

      if (!clientId || clientId.includes('your_')) {
        throw new Error('Configuration Strava manquante. Contactez le support technique.');
      }

      // Cr√©er l'URL d'autorisation Strava vers notre serveur
      const authUrl = `https://www.strava.com/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(serverUrl + '/strava-callback')}&approval_prompt=force&scope=read,activity:read_all&state=${userId}`;

      console.log('üîó Ouverture de l\'autorisation Strava...');

      // Ouvrir l'autorisation Strava
      const result = await WebBrowser.openAuthSessionAsync(
        authUrl, 
        serverUrl,
        {
          showInRecents: false,
          presentationStyle: WebBrowser.WebBrowserPresentationStyle.FULL_SCREEN
        }
      );

      console.log('üîÑ R√©sultat WebBrowser:', result.type);

      // Toujours v√©rifier le statut c√¥t√© serveur apr√®s tentative de connexion
      await new Promise(resolve => setTimeout(resolve, 3000)); // Attendre 3 secondes

      const serverStatus = await this.getStravaStatusFromServer(userId);
      console.log('üì° Statut serveur Strava:', serverStatus);

      if (serverStatus && serverStatus.connected) {
        console.log('‚úÖ Connexion Strava confirm√©e c√¥t√© serveur');

        // Mettre √† jour le statut local
        const status = await this.getIntegrationStatus(userId);
        status.strava = {
          connected: true,
          athlete: serverStatus.athlete
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);

        return true;
      } else {
        console.log('‚ùå Connexion Strava √©chou√©e');
        return false;
      }

    } catch (error) {
      console.error('‚ùå Erreur connexion Strava:', error);
      if (error.message.includes('Configuration')) {
        throw error; // Propager les erreurs de configuration
      }
      throw new Error('Impossible de connecter Strava. V√©rifiez votre connexion internet et r√©essayez.');
    }
  }

  static async exchangeStravaCode(code: string, userId: string): Promise<boolean> {
    try {
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';

      // Utiliser le serveur VPS pour l'√©change du token
      const response = await fetch(`${serverUrl}/api/strava/exchange-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: code,
          userId: userId
        })
      });

      if (!response.ok) {
        throw new Error('Erreur lors de l\'authentification Strava');
      }

      const result = await response.json();

      if (result.success) {
        // Mettre √† jour le statut local
        const status = await this.getIntegrationStatus(userId);
        status.strava = {
          connected: true,
          athlete: result.athlete,
          accessToken: result.access_token, // Stocker l'access token
          refreshToken: result.refresh_token, // Stocker le refresh token
          expiresAt: result.expires_at // Stocker l'expiration
        };
        await PersistentStorage.saveIntegrationStatus(userId, status);

        console.log('‚úÖ Strava connect√© via serveur VPS');
        return true;
      }

      return false;
    } catch (error) {
      console.error('‚ùå Erreur connexion Strava:', error);
      throw new Error('Impossible de se connecter √† Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async disconnectStrava(userId: string): Promise<void> {
    try {
      const status = await this.getIntegrationStatus(userId);
      status.strava = {
        connected: false
      };
      await PersistentStorage.saveIntegrationStatus(userId, status);
      console.log('‚úÖ Strava d√©connect√©');
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion Strava:', error);
      throw new Error('Impossible de d√©connecter Strava. V√©rifiez votre connexion internet.');
    }
  }

  static async refreshStravaToken(userId: string): Promise<string> {
    try {
      const status = await this.getIntegrationStatus(userId);

      if (!status.strava.connected || !status.strava.refreshToken) {
        throw new Error('Strava non connect√© ou token de rafra√Æchissement manquant');
      }

      const clientId = process.env.EXPO_PUBLIC_STRAVA_CLIENT_ID;
      const clientSecret = process.env.EXPO_PUBLIC_STRAVA_CLIENT_SECRET;

      if (!clientId || !clientSecret) {
        throw new Error('Configuration Strava manquante pour le rafra√Æchissement du token.');
      }

      const response = await fetch('https://www.strava.com/oauth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          client_id: clientId,
          client_secret: clientSecret,
          refresh_token: status.strava.refreshToken,
          grant_type: 'refresh_token'
        })
      });

      if (!response.ok) {
        console.error('Strava API Error:', await response.text()); // Log the actual error from Strava
        throw new Error('Erreur lors du rafra√Æchissement du token Strava');
      }

      const tokenData = await response.json();

      // Mettre √† jour les tokens
      status.strava.accessToken = tokenData.access_token;
      status.strava.refreshToken = tokenData.refresh_token;
      status.strava.expiresAt = tokenData.expires_at;

      await PersistentStorage.saveIntegrationStatus(userId, status);

      return tokenData.access_token;
    } catch (error) {
      console.error('‚ùå Erreur rafra√Æchissement token Strava:', error);
      // Si le token de rafra√Æchissement n'est plus valide, d√©connecter Strava
      if (error.message.includes('Erreur lors du rafra√Æchissement') || error.message.includes('invalid_grant')) {
        console.log('Token de rafra√Æchissement invalide ou expir√©. D√©connexion de Strava.');
        await this.disconnectStrava(userId);
      }
      throw new Error('Impossible de rafra√Æchir le token Strava. Veuillez vous reconnecter.');
    }
  }

  static async getValidStravaToken(userId: string): Promise<string> {
    try {
      const status = await this.getIntegrationStatus(userId);

      if (!status.strava.connected) {
        throw new Error('Strava non connect√©');
      }

      const now = Math.floor(Date.now() / 1000);
      if (!status.strava.expiresAt || now >= status.strava.expiresAt - 300) { // 5 minutes buffer
        // Token expire dans 5 minutes ou moins, le rafra√Æchir
        console.log('Token Strava expire bient√¥t, rafra√Æchissement...');
        return await this.refreshStravaToken(userId);
      }

      console.log('Utilisation du token Strava existant.');
      return status.strava.accessToken!; // L'op√©rateur ! est s√ªr ici car nous avons d√©j√† v√©rifi√© connected et le refresh est g√©r√©.
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration token Strava:', error);
      throw error; // Propager l'erreur pour que l'appelant puisse la g√©rer
    }
  }

  static async syncStravaActivities(userId: string): Promise<void> {
    try {
      const accessToken = await this.getValidStravaToken(userId);

      // R√©cup√©rer les activit√©s des 30 derniers jours
      const after = Math.floor((Date.now() - 30 * 24 * 60 * 60 * 1000) / 1000);

      const response = await fetch(`https://www.strava.com/api/v3/athlete/activities?after=${after}&per_page=100`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      if (!response.ok) {
        console.error('Strava API Error:', await response.text());
        throw new Error(`Erreur lors de la r√©cup√©ration des activit√©s Strava (Statut: ${response.status})`);
      }

      const activities = await response.json();

      // Traiter et formater les activit√©s
      const processedActivities: StravaActivity[] = activities.map((activity: any) => ({
        id: activity.id.toString(), // Assurer que l'ID est une cha√Æne
        name: activity.name || 'Sans nom', // Valeur par d√©faut si le nom est manquant
        type: activity.type,
        date: new Date(activity.start_date).toISOString(), // Normaliser la date
        duration: activity.moving_time,
        distance: activity.distance,
        elevationGain: activity.total_elevation_gain,
        averageHeartrate: activity.average_heartrate || null, // G√©rer les nulls
        maxHeartrate: activity.max_heartrate || null, // G√©rer les nulls
        averageSpeed: activity.average_speed,
        maxSpeed: activity.max_speed,
        calories: activity.kilojoules ? Math.round(activity.kilojoules * 0.239) : 0,
        kudosCount: activity.kudos_count || 0, // Valeur par d√©faut
        achievementCount: activity.achievement_count || 0 // Valeur par d√©faut
      }));

      // Sauvegarder les activit√©s sur le serveur VPS uniquement
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';
      const saveResponse = await fetch(`${serverUrl}/api/strava/${userId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(processedActivities),
      });

      if (!saveResponse.ok) {
        console.error('Serveur VPS Error:', await saveResponse.text());
        throw new Error(`Erreur lors de la sauvegarde des activit√©s Strava sur le serveur (Statut: ${saveResponse.status})`);
      }

      console.log('‚úÖ Activit√©s Strava synchronis√©es sur le serveur');
    } catch (error) {
      console.error('‚ùå Erreur synchronisation Strava:', error);
      // Si l'erreur est li√©e √† un token invalide, cela sera g√©r√© par getValidStravaToken
      throw error; // Propager l'erreur
    }
  }

  static async getStravaActivities(userId: string): Promise<StravaActivity[]> {
    try {
      const stored = await AsyncStorage.getItem(`strava_activities_${userId}`);
      if (stored) {
        const parsed = JSON.parse(stored);
        // Validation du format des donn√©es
        if (Array.isArray(parsed)) {
          return parsed.filter(activity =>
            activity &&
            typeof activity === 'object' &&
            activity.id &&
            activity.name &&
            activity.date
          );
        }
      }
      return [];
    } catch (error) {
      console.error('‚ùå Erreur chargement activit√©s Strava:', error);
      // Nettoyer les donn√©es corrompues
      await AsyncStorage.removeItem(`strava_activities_${userId}`);
      return [];
    }
  }

  static async getHealthData(userId: string): Promise<any[]> {
    try {
      return await PersistentStorage.getHealthData(userId);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es Apple Health:', error);
      throw new Error('Impossible de r√©cup√©rer les donn√©es Apple Health. V√©rifiez votre connexion internet.');
    }
  }

  static async getStravaStatusFromServer(userId: string): Promise<any> {
    try {
      const serverUrl = process.env.EXPO_PUBLIC_VPS_URL || 'http://51.178.29.220:5000';

      const response = await fetch(`${serverUrl}/api/strava/status/${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Statut Strava r√©cup√©r√© du serveur VPS:', data);
        return data;
      } else if (response.status === 404) {
        console.log('Statut Strava non trouv√© sur le serveur pour:', userId);
        return { connected: false }; // Si le serveur ne trouve pas le statut, consid√©rer comme d√©connect√©
      } else {
        console.error(`Erreur serveur VPS pour /api/strava/status/${userId}: Statut ${response.status}`);
        return { connected: false }; // En cas d'autre erreur, consid√©rer comme d√©connect√©
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statut Strava du serveur:', error);
      return { connected: false }; // En cas d'erreur r√©seau, consid√©rer comme d√©connect√©
    }
  }

  // M√©thodes g√©n√©rales
  static async getIntegrationStatus(userId: string): Promise<IntegrationConfig> {
    try {
      const status = await PersistentStorage.getUserIntegrationStatus(userId);
      // S'assurer que toutes les propri√©t√©s existent pour √©viter les erreurs
      status.appleHealth = status.appleHealth || { connected: false, permissions: [] };
      status.strava = status.strava || { connected: false };
      return status;
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur r√©cup√©ration statuts int√©grations, utilisation des valeurs par d√©faut:', error?.message || error);

      // Retourner une configuration par d√©faut au lieu de lancer une erreur
      return {
        appleHealth: {
          connected: false,
          permissions: []
        },
        strava: {
          connected: false
        }
      };
    }
  }

  static async updateIntegrationStatus(userId: string, status: IntegrationConfig): Promise<void> {
    try {
      await PersistentStorage.saveIntegrationStatus(userId, status);
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour statuts int√©grations:', error);
      throw new Error('Impossible de mettre √† jour les statuts d\'int√©grations. V√©rifiez votre connexion internet.');
    }
  }
}

// Fonction principale pour synchroniser toutes les donn√©es
export async function syncWithExternalApps(userId: string): Promise<void> {
  try {
    console.log('üîÑ D√©but de la synchronisation compl√®te pour utilisateur:', userId);

    const integrationStatus = await IntegrationsManager.getIntegrationStatus(userId);
    const results = {
      appleHealth: false,
      strava: false
    };

    // Synchroniser Apple Health si connect√©
    if (integrationStatus.appleHealth.connected) {
      try {
        await IntegrationsManager.syncAppleHealthData(userId);
        results.appleHealth = true;
        console.log('‚úÖ Apple Health synchronis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur sync Apple Health:', error);
        // Ne pas arr√™ter la synchronisation compl√®te en cas d'√©chec d'une int√©gration
      }
    } else {
      console.log('üçé Apple Health non connect√©, synchronisation ignor√©e.');
    }

    // Synchroniser Strava si connect√©
    if (integrationStatus.strava.connected) {
      try {
        await IntegrationsManager.syncStravaActivities(userId);
        results.strava = true;
        console.log('‚úÖ Strava synchronis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur sync Strava:', error);
        // Ne pas arr√™ter la synchronisation compl√®te en cas d'√©chec d'une int√©gration
      }
    } else {
      console.log('üèÉ Strava non connect√©, synchronisation ignor√©e.');
    }

    console.log('Synchronisation compl√®te termin√©e pour utilisateur:', userId, results);

    if (!results.appleHealth && integrationStatus.appleHealth.connected) {
      console.warn('Apple Health connect√© mais synchronisation √©chou√©e');
    }
    if (!results.strava && integrationStatus.strava.connected) {
      console.warn('Strava connect√© mais synchronisation √©chou√©e');
    }
  } catch (error) {
    console.error('Erreur lors de la synchronisation compl√®te:', error);
    // Lancer une erreur si la r√©cup√©ration du statut des int√©grations √©choue gravement
    throw error;
  }
}

export const testServerConnection = async (serverUrl: string): Promise<boolean> => {
  try {
    console.log(`Test de connexion au serveur VPS: ${serverUrl}`);

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    const response = await fetch(`${serverUrl}/api/health`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    console.log(`‚ö†Ô∏è Erreur de connexion au serveur ${serverUrl}:`, error);
    return false;
  }
};

export interface IntegrationStatus {
  id: string;
  name: string;
  description: string;
  isConnected: boolean;
  icon: string;
  lastSync: Date | null;
}

export const getIntegrationStatuses = async (userId: string): Promise<IntegrationStatus[]> => {
  try {
    console.log('üîç R√©cup√©ration statuts int√©grations pour:', userId);

    // Tester d'abord la disponibilit√© du serveur avec un timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 secondes

    let isServerAvailable = false;
    try {
      const testResponse = await fetch(`${process.env.EXPO_PUBLIC_VPS_URL}/api/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: controller.signal
      });

      isServerAvailable = testResponse.ok;
      console.log(`‚úÖ Serveur ${process.env.EXPO_PUBLIC_VPS_URL} disponible: ${isServerAvailable}`);
    } catch (testError) {
      console.log(`‚ö†Ô∏è Test de connexion au serveur ${process.env.EXPO_PUBLIC_VPS_URL} √©chou√©:`, testError);
      isServerAvailable = false;
    } finally {
      clearTimeout(timeoutId);
    }

    if (!isServerAvailable) {
      console.log('üìã Utilisation des statuts d\'int√©grations par d√©faut car le serveur n\'est pas disponible.');
      return getDefaultIntegrationStatuses();
    }

    // Si le serveur est disponible, r√©cup√©rer les statuts r√©els
    // Pour l'instant, on retourne toujours les valeurs par d√©faut car l'endpoint /api/integrations n'existe pas encore
    // et l'endpoint /api/strava/status/{userId} ne couvre pas toutes les int√©grations.
    console.log('üìã Utilisation des statuts d\'int√©grations par d√©faut (endpoint API manquant)');
    
    // Tentative de r√©cup√©ration des statuts r√©els si l'API √©tait impl√©ment√©e
    // Exemple :
    // const integrationStatus = await IntegrationsManager.getIntegrationStatus(userId);
    // return [
    //   { id: 'strava', name: 'Strava', description: 'Synchronisation des activit√©s sportives', isConnected: integrationStatus.strava.connected, icon: 'üèÉ‚Äç‚ôÇÔ∏è', lastSync: null },
    //   { id: 'apple-health', name: 'Apple Health', description: 'Donn√©es de sant√© et fitness', isConnected: integrationStatus.appleHealth.connected, icon: '‚ù§Ô∏è', lastSync: integrationStatus.appleHealth.lastSync ? new Date(integrationStatus.appleHealth.lastSync) : null },
    //   { id: 'google-fit', name: 'Google Fit', description: 'Suivi d\'activit√© Google', isConnected: false, icon: 'üìä', lastSync: null } // Google Fit non impl√©ment√©
    // ];

    return getDefaultIntegrationStatuses();

  } catch (error) {
    console.log('‚ö†Ô∏è Erreur g√©n√©rale r√©cup√©ration int√©grations, utilisation des valeurs par d√©faut:', error?.message || error);
    return getDefaultIntegrationStatuses();
  }
};

// Fonction helper pour les valeurs par d√©faut
const getDefaultIntegrationStatuses = (): IntegrationStatus[] => {
  return [
    {
      id: 'strava',
      name: 'Strava',
      description: 'Synchronisation des activit√©s sportives',
      isConnected: false,
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      lastSync: null
    },
    {
      id: 'apple-health',
      name: 'Apple Health',
      description: 'Donn√©es de sant√© et fitness',
      isConnected: false,
      icon: '‚ù§Ô∏è',
      lastSync: null
    },
    {
      id: 'google-fit',
      name: 'Google Fit',
      description: 'Suivi d\'activit√© Google',
      isConnected: false,
      icon: 'üìä',
      lastSync: null
    }
  ];
};