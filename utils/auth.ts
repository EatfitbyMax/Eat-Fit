import { PersistentStorage } from './storage';
import * as Crypto from 'expo-crypto';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface User {
  id: string;
  email: string;
  password?: string;
  firstName?: string;
  lastName?: string;
  userType: 'client' | 'coach';
  age?: number;
  weight?: number;
  height?: number;
  gender?: string;
  activityLevel?: string;
  goals?: string[];
  favoriteSport?: string;
  profileImage?: string;
  hashedPassword?: string;
}

let currentUserCache: User | null = null;

// Cl√©s pour AsyncStorage
const SESSION_KEY = 'eatfitbymax_session';
const SESSION_EXPIRY_KEY = 'eatfitbymax_session_expiry';

// Dur√©e de validit√© de la session (7 jours)
const SESSION_DURATION = 7 * 24 * 60 * 60 * 1000; // 7 jours en millisecondes

// Fonction pour cr√©er un token de session s√©curis√©
async function createSessionToken(userEmail: string): Promise<string> {
  const timestamp = Date.now().toString();
  const sessionData = `${userEmail}:${timestamp}`;
  const hashedToken = await Crypto.digestStringAsync(
    Crypto.CryptoDigestAlgorithm.SHA256,
    sessionData + 'eatfitbymax_session_salt_2025',
    { encoding: Crypto.CryptoEncoding.HEX }
  );
  return hashedToken;
}

// Fonction pour sauvegarder la session
async function saveSession(user: User): Promise<void> {
  try {
    const sessionToken = await createSessionToken(user.email);
    const expiryTime = Date.now() + SESSION_DURATION;

    await AsyncStorage.setItem(SESSION_KEY, JSON.stringify({
      token: sessionToken,
      userEmail: user.email,
      userId: user.id,
      userType: user.userType
    }));

    await AsyncStorage.setItem(SESSION_EXPIRY_KEY, expiryTime.toString());

    console.log('üíæ Session sauvegard√©e avec succ√®s, expire le:', new Date(expiryTime).toLocaleString());
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde session:', error);
  }
}

// Fonction pour r√©cup√©rer la session
async function loadSession(): Promise<User | null> {
  try {
    const sessionData = await AsyncStorage.getItem(SESSION_KEY);
    const expiryData = await AsyncStorage.getItem(SESSION_EXPIRY_KEY);

    if (!sessionData || !expiryData) {
      console.log('üì± Aucune session sauvegard√©e');
      return null;
    }

    const expiryTime = parseInt(expiryData);
    const currentTime = Date.now();

    // V√©rifier si la session a expir√©
    if (currentTime > expiryTime) {
      console.log('‚è∞ Session expir√©e, suppression...');
      await clearSession();
      return null;
    }

    const session = JSON.parse(sessionData);

    // R√©cup√©rer les donn√©es utilisateur compl√®tes depuis le serveur (clients ET coaches)
    const users = await PersistentStorage.getUsers();
    const coaches = await PersistentStorage.getCoaches();
    const allUsers = [...users, ...coaches];
    const user = allUsers.find((u: any) => u.email === session.userEmail && u.id === session.userId);

    if (!user) {
      console.log('‚ùå Utilisateur de session non trouv√© sur le serveur');
      await clearSession();
      return null;
    }

    // Cr√©er l'objet utilisateur sans le mot de passe
    const userWithoutPassword: User = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      userType: user.userType,
      age: user.age,
      weight: user.weight,
      height: user.height,
      gender: user.gender,
      activityLevel: user.activityLevel,
      goals: user.goals,
      favoriteSport: user.favoriteSport,
      profileImage: user.profileImage
    };

    console.log('‚úÖ Session restaur√©e pour:', user.email, '- Expire le:', new Date(expiryTime).toLocaleString());
    return userWithoutPassword;

  } catch (error) {
    console.error('‚ùå Erreur chargement session:', error);
    await clearSession();
    return null;
  }
}

// Fonction pour supprimer la session
async function clearSession(): Promise<void> {
  try {
    await AsyncStorage.removeItem(SESSION_KEY);
    await AsyncStorage.removeItem(SESSION_EXPIRY_KEY);
    console.log('üóëÔ∏è Session supprim√©e');
  } catch (error) {
    console.error('‚ùå Erreur suppression session:', error);
  }
}

export async function forceRegenerateUserHash(email: string, currentPassword: string): Promise<boolean> {
  try {
    console.log('üîÑ R√©g√©n√©ration forc√©e du hash pour:', email);

    // R√©cup√©rer les utilisateurs
    const users = await PersistentStorage.getUsers();

    // Trouver l'utilisateur
    const userIndex = users.findIndex((u: any) => u.email === email);
    if (userIndex === -1) {
      console.log('‚ùå Utilisateur non trouv√© pour la r√©g√©n√©ration');
      return false;
    }

    // G√©n√©rer le nouveau hash avec le syst√®me actuel (HEX)
    const passwordString = String(currentPassword).trim();
    const saltedPassword = passwordString + 'eatfitbymax_salt_2025';
    const hashedPassword = await Crypto.digestStringAsync(
      Crypto.CryptoDigestAlgorithm.SHA256,
      saltedPassword,
      { encoding: Crypto.CryptoEncoding.HEX }
    );

    // Mettre √† jour l'utilisateur
    users[userIndex] = {
      ...users[userIndex],
      hashedPassword: hashedPassword,
      password: undefined // Supprimer l'ancien mot de passe en clair
    };

    // Sauvegarder
    await PersistentStorage.saveUsers(users);

    console.log('‚úÖ Hash r√©g√©n√©r√© avec succ√®s pour:', email);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur r√©g√©n√©ration hash:', error);
    return false;
  }
}

export async function resetUserPasswordHash(email: string, newPassword: string): Promise<boolean> {
  try {
    console.log('üîÑ R√©initialisation du hash pour:', email);

    // R√©cup√©rer les utilisateurs
    const users = await PersistentStorage.getUsers();

    // Trouver l'utilisateur
    const userIndex = users.findIndex((u: any) => u.email === email);
    if (userIndex === -1) {
      console.log('‚ùå Utilisateur non trouv√© pour la r√©initialisation');
      return false;
    }

    // G√©n√©rer le nouveau hash
    const passwordString = String(newPassword).trim();
    const saltedPassword = passwordString + 'eatfitbymax_salt_2025';
    const hashedPassword = await Crypto.digestStringAsync(
      Crypto.CryptoDigestAlgorithm.SHA256,
      saltedPassword,
      { encoding: Crypto.CryptoEncoding.HEX }
    );

    // Mettre √† jour l'utilisateur
    users[userIndex] = {
      ...users[userIndex],
      hashedPassword: hashedPassword,
      password: undefined // Supprimer l'ancien mot de passe en clair
    };

    // Sauvegarder
    await PersistentStorage.saveUsers(users);

    console.log('‚úÖ Hash r√©initialis√© avec succ√®s pour:', email);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur r√©initialisation hash:', error);
    return false;
  }
}

export async function initializeAdminAccount(): Promise<void> {
  try {
    console.log('üí´ Utilisation du serveur Replit pour l\'authentification');
    // Pas d'initialisation locale n√©cessaire
  } catch (error) {
    console.error('Erreur initialisation base utilisateurs:', error);
    throw new Error('Impossible d\'initialiser le syst√®me d\'authentification. V√©rifiez votre connexion internet.');
  }
}

export async function getCurrentUser(): Promise<User | null> {
  // V√©rifier d'abord le cache m√©moire
  if (currentUserCache) {
    return currentUserCache;
  }

  // Si pas de cache m√©moire, essayer de charger depuis la session persistante
  try {
    console.log('üîÑ Tentative de restauration de session...');
    const sessionUser = await loadSession();

    if (sessionUser) {
      // Mettre en cache m√©moire
      currentUserCache = sessionUser;
      console.log('‚úÖ Session restaur√©e et mise en cache pour:', sessionUser.email);
      return sessionUser;
    }
  } catch (error) {
    console.error('‚ùå Erreur restauration session:', error);
  }

  return null;
}

export async function login(email: string, password: string): Promise<User | null> {
  try {
    console.log('üîÑ Tentative de connexion pour:', email);

    // R√©cup√©rer les utilisateurs ET les coaches depuis le serveur
    const users = await PersistentStorage.getUsers();
    const coaches = await PersistentStorage.getCoaches();

    // Combiner les deux listes pour la recherche
    const allUsers = [...users, ...coaches];

    console.log('üìä Nombre d\'utilisateurs r√©cup√©r√©s:', users.length);
    console.log('üë®‚Äçüíº Nombre de coaches r√©cup√©r√©s:', coaches.length);
    console.log('üë• Tous les utilisateurs disponibles:', allUsers.map((u: any) => ({ 
      email: u.email, 
      userType: u.userType,
      hashedPassword: u.hashedPassword ? 'OUI' : 'NON'
    })));

    // Trouver l'utilisateur (client ou coach)
    const user = allUsers.find((u: any) => u.email === email);
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√© pour:', email);
      return null;
    }

    console.log('üë§ Utilisateur trouv√©:', {
      email: user.email,
      userType: user.userType,
      hasPassword: user.password ? 'OUI' : 'NON',
      hasHashedPassword: user.hashedPassword ? 'OUI' : 'NON'
    });

    // V√©rifier le mot de passe
    let isPasswordValid = false;

    if (user.hashedPassword) {
      // Nouveau syst√®me avec hash
      try {
        const passwordString = String(password).trim();
        const saltedPassword = passwordString + 'eatfitbymax_salt_2025';

        console.log('üîç Debug hash comparison:', {
          inputLength: passwordString.length,
          saltedLength: saltedPassword.length,
          storedHashLength: user.hashedPassword.length,
          storedHashPreview: user.hashedPassword.substring(0, 10) + '...'
        });

        // V√©rifier d'abord avec le nouveau syst√®me HEX (SHA256)
        const hashedInputHex = await Crypto.digestStringAsync(
          Crypto.CryptoDigestAlgorithm.SHA256,
          saltedPassword,
          { encoding: Crypto.CryptoEncoding.HEX }
        );

        isPasswordValid = hashedInputHex === user.hashedPassword;
        console.log('üîê V√©rification SHA256-HEX:', isPasswordValid ? 'VALIDE' : 'INVALIDE');

        // Si √©chec avec SHA256-HEX, essayer avec Base64 (ancien syst√®me SHA256)
        if (!isPasswordValid && user.hashedPassword.length === 44) {
          console.log('üîÑ Tentative avec ancien encodage SHA256-Base64...');
          const hashedInputBase64 = await Crypto.digestStringAsync(
            Crypto.CryptoDigestAlgorithm.SHA256,
            saltedPassword,
            { encoding: Crypto.CryptoEncoding.BASE64 }
          );

          isPasswordValid = hashedInputBase64 === user.hashedPassword;
          console.log('üîê V√©rification SHA256-Base64:', isPasswordValid ? 'VALIDE' : 'INVALIDE');

          // Si connexion r√©ussie avec Base64, migrer vers HEX
          if (isPasswordValid) {
            console.log('üîÑ Migration du hash SHA256-Base64 vers SHA256-HEX...');
            try {
              // Mettre √† jour l'utilisateur avec le nouveau hash HEX
              const updatedUsers = users.map((u: any) => 
                u.email === email 
                  ? { ...u, hashedPassword: hashedInputHex }
                  : u
              );

              await PersistentStorage.saveUsers(updatedUsers);
              console.log('‚úÖ Migration SHA256-Base64->SHA256-HEX termin√©e');
            } catch (migrationError) {
              console.error('‚ö†Ô∏è Erreur migration SHA256-Base64->SHA256-HEX (connexion maintenue):', migrationError);
            }
          }
        }

        // Si √©chec avec SHA256, essayer avec MD5 (tr√®s ancien syst√®me)
        if (!isPasswordValid && user.hashedPassword.length === 32) {
          console.log('üîÑ Tentative avec ancien hash MD5...');
          try {
            // Essayer d'abord MD5 sans salt (ancien syst√®me)
            const hashedInputMD5NoSalt = await Crypto.digestStringAsync(
              Crypto.CryptoDigestAlgorithm.MD5,
              passwordString, // MD5 sans salt
              { encoding: Crypto.CryptoEncoding.HEX }
            );

            isPasswordValid = hashedInputMD5NoSalt === user.hashedPassword;
            console.log('üîê V√©rification MD5 (sans salt):', isPasswordValid ? 'VALIDE' : 'INVALIDE');

            // Si √©chec sans salt, essayer avec salt
            if (!isPasswordValid) {
              console.log('üîÑ Tentative MD5 avec salt...');
              const hashedInputMD5WithSalt = await Crypto.digestStringAsync(
                Crypto.CryptoDigestAlgorithm.MD5,
                saltedPassword, // MD5 avec salt
                { encoding: Crypto.CryptoEncoding.HEX }
              );

              isPasswordValid = hashedInputMD5WithSalt === user.hashedPassword;
              console.log('üîê V√©rification MD5 (avec salt):', isPasswordValid ? 'VALIDE' : 'INVALIDE');
            }

            // Si connexion r√©ussie avec MD5, migrer vers SHA256-HEX
            if (isPasswordValid) {
              console.log('üîÑ Migration du hash MD5 vers SHA256-HEX...');
              try {
                // Mettre √† jour l'utilisateur avec le nouveau hash SHA256-HEX
                const updatedUsers = users.map((u: any) => 
                  u.email === email 
                    ? { ...u, hashedPassword: hashedInputHex }
                    : u
                );

                await PersistentStorage.saveUsers(updatedUsers);
                console.log('‚úÖ Migration MD5->SHA256-HEX termin√©e');
              } catch (migrationError) {
                console.error('‚ö†Ô∏è Erreur migration MD5->SHA256-HEX (connexion maintenue):', migrationError);
              }
            }
          } catch (md5Error) {
            console.error('‚ùå Erreur v√©rification MD5:', md5Error);
          }
        }

        if (!isPasswordValid) {
          console.log('‚ùå Hash mismatch d√©tect√© - tentative avec ancien syst√®me mot de passe');
        }
      } catch (compareError) {
        console.error('‚ùå Erreur comparaison hash:', compareError);
        isPasswordValid = false;
      }
    } else if (user.password) {
      // Ancien syst√®me (temporaire)
      isPasswordValid = user.password === password;
      console.log('üîì V√©rification ancien syst√®me:', isPasswordValid ? 'VALIDE' : 'INVALIDE');

      // Si la connexion r√©ussit avec l'ancien syst√®me, migrer vers le nouveau hash
      if (isPasswordValid) {
        console.log('üîÑ Migration du mot de passe vers le nouveau syst√®me de hash...');
        try {
          const passwordString = String(password).trim();
          const saltedPassword = passwordString + 'eatfitbymax_salt_2025';
          const newHashedPassword = await Crypto.digestStringAsync(
            Crypto.CryptoDigestAlgorithm.SHA256,
            saltedPassword,
            { encoding: Crypto.CryptoEncoding.HEX }
          );

          // Mettre √† jour l'utilisateur dans la base
          const updatedUsers = users.map((u: any) => 
            u.email === email 
              ? { ...u, hashedPassword: newHashedPassword, password: undefined }
              : u
          );

          await PersistentStorage.saveUsers(updatedUsers);
          console.log('‚úÖ Migration du hash termin√©e');
        } catch (migrationError) {
          console.error('‚ö†Ô∏è Erreur migration hash (connexion maintenue):', migrationError);
        }
      }
    } else {
      console.log('‚ùå Aucun mot de passe d√©fini pour cet utilisateur');
      return null;
    }

    if (!isPasswordValid) {
      console.log('‚ùå Mot de passe incorrect pour:', email);
      return null;
    }

    // V√©rification sp√©ciale pour les coachs
    if (user.userType === 'coach') {
      if (user.status !== 'active') {
        console.log('‚ùå Compte coach non activ√©:', email);
        throw new Error('Votre compte coach n\'est pas encore activ√©. Contactez l\'administrateur.');
      }
    }

    // Cr√©er l'objet utilisateur sans le mot de passe
    const userWithoutPassword: User = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      userType: user.userType,
      age: user.age,
      weight: user.weight,
      height: user.height,
      gender: user.gender,
      activityLevel: user.activityLevel,
      goals: user.goals,
      favoriteSport: user.favoriteSport,
      profileImage: user.profileImage
    };

    // Sauvegarder la session en cache m√©moire et de mani√®re persistante
    currentUserCache = userWithoutPassword;
    await saveSession(userWithoutPassword);
    console.log('üíæ Session utilisateur mise en cache m√©moire et sauvegard√©e');

    console.log('‚úÖ Connexion r√©ussie pour:', email);
    return userWithoutPassword;
  } catch (error) {
    console.error('‚ùå Erreur connexion compl√®te:', error);
    throw new Error('Impossible de se connecter. V√©rifiez votre connexion internet.');
  }
}

export async function register(userData: Omit<User, 'id'> & { password: string }): Promise<User | null> {
  try {
    console.log('üîÑ Tentative d\'inscription pour:', userData.email);

    // V√©rifier que le mot de passe est bien fourni
    if (!userData.password || typeof userData.password !== 'string') {
      console.log('‚ùå Mot de passe invalide ou manquant');
      throw new Error('Mot de passe requis');
    }

    // R√©cup√©rer les utilisateurs existants depuis le serveur uniquement
    const users = await PersistentStorage.getUsers();
    console.log('üìä Utilisateurs r√©cup√©r√©s depuis le serveur:', users.length);

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = users.find((u: any) => u.email === userData.email);
    if (existingUser) {
      console.log('‚ùå Utilisateur d√©j√† existant:', userData.email);
      return null;
    }

    // Hacher le mot de passe avec validation
    console.log('üîê Hachage du mot de passe...', `Type: ${typeof userData.password}, Longueur: ${userData.password.length}`);

    let hashedPassword: string;
    try {
      const passwordString = String(userData.password).trim();

      console.log('üîß Pr√©paration hachage:', {
        passwordString: passwordString.substring(0, 3) + '***',
        method: 'expo-crypto-sha256'
      });

      // Hachage s√©curis√© avec expo-crypto
      const saltedPassword = passwordString + 'eatfitbymax_salt_2025';
      hashedPassword = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        saltedPassword,
        { encoding: Crypto.CryptoEncoding.HEX }
      );

      console.log('‚úÖ Hachage r√©ussi avec expo-crypto, longueur:', hashedPassword.length);
    } catch (hashError) {
      console.error('‚ùå Erreur d√©taill√©e hachage:', hashError);
      throw new Error(`Erreur hachage mot de passe: ${hashError.message}`);
    }

    // Cr√©er le nouvel utilisateur
    const newUser = {
      ...userData,
      id: Date.now().toString(),
      hashedPassword: hashedPassword,
      // S'assurer que le sport favori est inclus
      favoriteSport: userData.favoriteSport || '',
      // Ne pas stocker le mot de passe en clair
      password: undefined
    };

    // Ajouter √† la liste des utilisateurs
    users.push(newUser);

    // Sauvegarder sur le serveur
    await PersistentStorage.saveUsers(users);
    console.log('‚úÖ Utilisateurs sauvegard√©s sur le serveur');

    // Cr√©er l'objet de retour sans les mots de passe
    const userWithoutPassword: User = {
      id: newUser.id,
      email: newUser.email,
      firstName: newUser.firstName,
      lastName: newUser.lastName,
      userType: newUser.userType,
      age: newUser.age,
      weight: newUser.weight,
      height: newUser.height,
      gender: newUser.gender,
      activityLevel: newUser.activityLevel,
      goals: newUser.goals,
      favoriteSport: newUser.favoriteSport,
      profileImage: newUser.profileImage
    };

    // Sauvegarder la session en cache m√©moire et de mani√®re persistante
    currentUserCache = userWithoutPassword;
    await saveSession(userWithoutPassword);
    console.log('üíæ Session utilisateur mise en cache m√©moire et sauvegard√©e');

    console.log('‚úÖ Inscription r√©ussie pour:', userData.email);
    return userWithoutPassword;
  } catch (error) {
    console.error('‚ùå Erreur inscription compl√®te:', error);
    throw new Error('Impossible de cr√©er le compte. V√©rifiez votre connexion internet.');
  }
}

export async function logout(): Promise<void> {
  try {
    console.log('üîÑ Fonction logout appel√©e - Vidage du cache et de la session...');

    // 1. Vider IMM√âDIATEMENT le cache utilisateur en premier
    currentUserCache = null;

    // 2. Supprimer la session persistante
    await clearSession();

    // 3. Vider √† nouveau le cache par s√©curit√©
    currentUserCache = null;

    // 4. Force garbage collection si possible
    if (global && global.gc) {
      try {
        global.gc();
      } catch (e) {
        // Ignore si gc n'est pas disponible
      }
    }

    // 5. Attendre un tick pour que le changement se propage
    await new Promise(resolve => setTimeout(resolve, 50));

    // 6. V√©rification finale UNIQUE (pour √©viter les race conditions)
    const testUser = await getCurrentUser();
    if (testUser === null) {
      console.log('‚úÖ V√©rification finale r√©ussie - getCurrentUser retourne null');
    } else {
      console.error('‚ùå ERREUR CRITIQUE: getCurrentUser retourne encore un utilisateur apr√®s logout!');
      // Forcer le nettoyage d√©finitif
      currentUserCache = null;
      await clearSession();
    }

    console.log('‚úÖ D√©connexion r√©ussie - Cache utilisateur compl√®tement vid√©');

  } catch (error) {
    console.error('‚ùå Erreur d√©connexion:', error);
    // S'assurer que le cache est vid√© m√™me en cas d'erreur
    currentUserCache = null;
    await clearSession();
  }
}

const USER_STORAGE_KEY = 'eatfitbymax_user'; // Define the missing USER_STORAGE_KEY

export const deleteUserAccount = async (userId: string): Promise<void> => {
  try {
    // Supprimer toutes les donn√©es locales de l'utilisateur
    await AsyncStorage.multiRemove([
      USER_STORAGE_KEY,
      `subscription_${userId}`,
      `integration_status_${userId}`,
      `user_preferences_${userId}`,
      `workout_programs_${userId}`,
      `nutrition_data_${userId}`,
      `progress_data_${userId}`,
    ]);

    // Supprimer les donn√©es sur le serveur
    const API_URL = process.env.EXPO_PUBLIC_API_URL || 'https://eatfitbymax.cloud';

    try {
      const response = await fetch(`${API_URL}/api/users/${userId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.warn('Erreur suppression serveur, mais donn√©es locales supprim√©es');
      }
    } catch (serverError) {
      console.warn('Serveur inaccessible, mais donn√©es locales supprim√©es:', serverError);
    }

    console.log('‚úÖ Compte utilisateur supprim√© avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du compte:', error);
    throw new Error('Impossible de supprimer le compte');
  }
};

export async function updateUserData(email: string, updateData: {
  firstName?: string;
  lastName?: string;
  gender?: 'Homme' | 'Femme';
  age?: number;
  height?: number;
  weight?: number;
  favoriteSport?: string;
  targetWeight?: number;
}): Promise<boolean> {
  try {
    // R√©cup√©rer les utilisateurs ET les coaches depuis le serveur
    const users = await PersistentStorage.getUsers();
    const coaches = await PersistentStorage.getCoaches();

    // Chercher dans les clients d'abord
    let userIndex = users.findIndex((u: any) => u.email === email);
    let isCoach = false;
    let updatedUser;

    if (userIndex !== -1) {
      // Utilisateur trouv√© dans les clients
      updatedUser = {
        ...users[userIndex],
        ...updateData,
        name: updateData.firstName && updateData.lastName 
          ? `${updateData.firstName} ${updateData.lastName}`
          : users[userIndex].name
      };
      users[userIndex] = updatedUser;
      await PersistentStorage.saveUsers(users);
    } else {
      // Chercher dans les coaches
      userIndex = coaches.findIndex((c: any) => c.email === email);
      if (userIndex === -1) {
        console.log('Utilisateur non trouv√© pour la mise √† jour');
        return false;
      }

      isCoach = true;
      updatedUser = {
        ...coaches[userIndex],
        ...updateData,
        name: updateData.firstName && updateData.lastName 
          ? `${updateData.firstName} ${updateData.lastName}`
          : coaches[userIndex].name
      };
      coaches[userIndex] = updatedUser;

      // Sauvegarder les coaches (fonction √† cr√©er)
      try {
        const response = await fetch(`${API_URL}/api/coaches`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(coaches)
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Erreur sauvegarde coaches:', error);
        throw error;
      }
    }

    // Mettre √† jour la session en cache m√©moire et persistante
    const { password: _, hashedPassword: __, ...userWithoutPassword } = updatedUser;
    currentUserCache = userWithoutPassword;
    await saveSession(userWithoutPassword);

    console.log('Donn√©es utilisateur mises √† jour avec succ√®s');
    return true;
  } catch (error) {
    console.error('Erreur mise √† jour utilisateur:', error);
    throw new Error('Impossible de mettre √† jour les donn√©es utilisateur. V√©rifiez votre connexion internet.');
  }
}