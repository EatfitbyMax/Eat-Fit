
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import { PersistentStorage } from './storage';

// Configuration des notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

// Configuration du canal de notification par d√©faut (Android)
if (Platform.OS === 'android') {
  Notifications.setNotificationChannelAsync('default', {
    name: 'EatFit By Max',
    importance: Notifications.AndroidImportance.MAX,
    vibrationPattern: [0, 250, 250, 250],
    lightColor: '#1E1E1E',
  });
}

export class NotificationService {
  
  // Demander les permissions de notifications
  static async requestPermissions(): Promise<boolean> {
    if (Device.isDevice) {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.warn('‚ö†Ô∏è Permission notifications refus√©e');
        return false;
      }
      
      console.log('‚úÖ Permissions notifications accord√©es');
      return true;
    } else {
      console.warn('‚ö†Ô∏è Notifications non support√©es sur √©mulateur');
      return false;
    }
  }

  // Programmer les rappels de repas
  static async scheduleNutritionReminders(userId: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      
      if (!settings.mealReminders || !settings.pushNotifications) {
        console.log('üîî Rappels de repas d√©sactiv√©s');
        return;
      }

      // Annuler les anciennes notifications
      await Notifications.cancelAllScheduledNotificationsAsync();

      // Sons personnalis√©s selon les pr√©f√©rences
      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      // Programmer petit-d√©jeuner (8h00)
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üåÖ Petit-d√©jeuner',
          body: 'C\'est l\'heure de votre petit-d√©jeuner ! Bon app√©tit üç≥',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          hour: 8,
          minute: 0,
          repeats: true,
        },
      });

      // Programmer d√©jeuner (12h30)
      await Notifications.scheduleNotificationAsync({
        content: {
          title: '‚òÄÔ∏è D√©jeuner',
          body: 'Il est temps de d√©jeuner ! Prenez une pause ü•ó',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          hour: 12,
          minute: 30,
          repeats: true,
        },
      });

      // Programmer d√Æner (19h00)
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üåÜ D√Æner',
          body: 'L\'heure du d√Æner est arriv√©e ! Bon repas üçΩÔ∏è',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          hour: 19,
          minute: 0,
          repeats: true,
        },
      });

      console.log('‚úÖ Rappels de repas programm√©s');
    } catch (error) {
      console.error('‚ùå Erreur programmation rappels repas:', error);
    }
  }

  // Programmer les rappels d'entra√Ænement
  static async scheduleWorkoutReminders(userId: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      
      if (!settings.workoutReminders || !settings.pushNotifications) {
        console.log('üîî Rappels d\'entra√Ænement d√©sactiv√©s');
        return;
      }

      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      // Programmer rappel entra√Ænement (18h00)
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üèãÔ∏è‚Äç‚ôÇÔ∏è Entra√Ænement',
          body: 'C\'est l\'heure de votre s√©ance d\'entra√Ænement ! üí™',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          hour: 18,
          minute: 0,
          repeats: true,
        },
      });

      console.log('‚úÖ Rappels d\'entra√Ænement programm√©s');
    } catch (error) {
      console.error('‚ùå Erreur programmation rappels entra√Ænement:', error);
    }
  }

  // Envoyer notification de motivation
  static async sendMotivationNotification(userId: string, message: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      
      if (!settings.progressUpdates || !settings.pushNotifications) {
        return;
      }

      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üéØ Motivation',
          body: message,
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: null, // Imm√©diate
      });

      console.log('‚úÖ Notification de motivation envoy√©e');
    } catch (error) {
      console.error('‚ùå Erreur envoi notification motivation:', error);
    }
  }

  // Envoyer notification du coach
  static async sendCoachNotification(userId: string, coachName: string, message: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      
      if (!settings.coachMessages || !settings.pushNotifications) {
        return;
      }

      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      await Notifications.scheduleNotificationAsync({
        content: {
          title: `üí¨ Message de ${coachName}`,
          body: message,
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: null, // Imm√©diate
      });

      console.log('‚úÖ Notification coach envoy√©e');
    } catch (error) {
      console.error('‚ùå Erreur envoi notification coach:', error);
    }
  }

  // Programmer rapport hebdomadaire
  static async scheduleWeeklyReport(userId: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      
      if (!settings.weeklyReports || !settings.pushNotifications) {
        return;
      }

      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      // Tous les dimanches √† 20h
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üìä Rapport hebdomadaire',
          body: 'Votre r√©sum√© de la semaine est disponible ! üìà',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          weekday: 1, // Dimanche
          hour: 20,
          minute: 0,
          repeats: true,
        },
      });

      console.log('‚úÖ Rapport hebdomadaire programm√©');
    } catch (error) {
      console.error('‚ùå Erreur programmation rapport hebdomadaire:', error);
    }
  }

  // Initialiser toutes les notifications pour un utilisateur
  static async initializeNotifications(userId: string): Promise<void> {
    try {
      console.log('üîî Initialisation des notifications pour:', userId);
      
      // Demander les permissions
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) {
        console.warn('‚ö†Ô∏è Permissions notifications non accord√©es');
        return;
      }

      // Programmer toutes les notifications
      await this.scheduleNutritionReminders(userId);
      await this.scheduleWorkoutReminders(userId);
      await this.scheduleWeeklyReport(userId);

      console.log('‚úÖ Toutes les notifications ont √©t√© initialis√©es');
    } catch (error) {
      console.error('‚ùå Erreur initialisation notifications:', error);
    }
  }

  // Tester les notifications
  static async testNotification(userId: string): Promise<void> {
    try {
      const settings = await PersistentStorage.getNotificationSettings(userId);
      const soundConfig = settings.soundEnabled ? 'default' : undefined;

      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üß™ Test de notification',
          body: 'Votre syst√®me de notifications fonctionne parfaitement ! üéâ',
          sound: soundConfig,
          vibrate: settings.vibrationEnabled ? [0, 250, 250, 250] : [],
        },
        trigger: {
          seconds: 2,
        },
      });

      console.log('‚úÖ Notification de test programm√©e');
    } catch (error) {
      console.error('‚ùå Erreur test notification:', error);
    }
  }

  // Annuler toutes les notifications
  static async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚úÖ Toutes les notifications annul√©es');
    } catch (error) {
      console.error('‚ùå Erreur annulation notifications:', error);
    }
  }

  // Mettre √† jour les notifications quand les param√®tres changent
  static async updateNotifications(userId: string): Promise<void> {
    try {
      // Annuler les anciennes
      await this.cancelAllNotifications();
      
      // Reprogrammer avec les nouveaux param√®tres
      await this.initializeNotifications(userId);
      
      console.log('‚úÖ Notifications mises √† jour');
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour notifications:', error);
    }
  }
}
