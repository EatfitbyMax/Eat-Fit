import AsyncStorage from '@react-native-async-storage/async-storage';
import { getCurrentUser } from './auth';

// Plans d'abonnement disponibles
export const SUBSCRIPTION_PLANS = [
  {
    id: 'free',
    name: 'Version Gratuite',
    price: 0,
    duration: 'month',
    currency: 'EUR',
    features: [
      'Fonctionnalit√©s de base',
      'Suivi simple des repas',
      'Plans d'entra√Ænement basiques'
    ]
  },
  {
    id: 'bronze',
    name: 'BRONZE',
    price: 9.99,
    duration: 'month',
    currency: 'EUR',
    features: [
      'Toutes les fonctionnalit√©s gratuites',
      'Plans d\'entra√Ænement avanc√©s',
      'Suivi nutritionnel d√©taill√©',
      'Support prioritaire'
    ]
  },
  {
    id: 'silver',
    name: 'SILVER',
    price: 19.99,
    duration: 'month',
    currency: 'EUR',
    features: [
      'Toutes les fonctionnalit√©s Bronze',
      'Coaching personnalis√©',
      'Int√©grations avanc√©es',
      'Analyses d√©taill√©es'
    ]
  },
  {
    id: 'gold',
    name: 'GOLD',
    price: 29.99,
    duration: 'month',
    currency: 'EUR',
    features: [
      'Toutes les fonctionnalit√©s Silver',
      'Suivi en temps r√©el',
      'API compl√®te',
      'Support 24/7'
    ]
  },
  {
    id: 'diamond',
    name: 'DIAMOND',
    price: 49.99,
    duration: 'month',
    currency: 'EUR',
    features: [
      'Toutes les fonctionnalit√©s Gold',
      'Coach personnel d√©di√©',
      'Acc√®s anticip√© aux nouvelles fonctionnalit√©s',
      'Personnalisation compl√®te'
    ]
  }
];

export interface Subscription {
  planId: string;
  planName: string;
  status: 'active' | 'inactive' | 'cancelled';
  price: number;
  currency: string;
  paymentMethod: string;
}

export const checkSubscriptionStatus = async (): Promise<{ isPremium: boolean; planId: string }> => {
  try {
    const currentUser = await getCurrentUser();
    if (!currentUser) return { isPremium: false, planId: 'free' };

    // Utilisateurs premium par d√©faut (pour les tests)
    const premiumEmails: string[] = ['m.pacullmarquie@gmail.com'];

    if (premiumEmails.includes(currentUser.email)) {
      // Configuration sp√©cifique pour m.pacullmarquie@gmail.com
      if (currentUser.email === 'm.pacullmarquie@gmail.com') {
        return { isPremium: true, planId: 'bronze' };
      }
      return { isPremium: true, planId: 'diamond' };
    }

    // V√©rifier le statut d'abonnement depuis le stockage local ou serveur
    const subscriptionStatus = await AsyncStorage.getItem(`subscription_${currentUser.id}`);
    const isPremium = subscriptionStatus === 'premium';

    return { 
      isPremium, 
      planId: isPremium ? 'gold' : 'free' 
    };
  } catch (error) {
    console.error('Erreur v√©rification abonnement:', error);
    return { isPremium: false, planId: 'free' };
  }
};

// Fonction de compatibilit√© pour l'ancien code
export const checkSubscriptionStatusBoolean = async (): Promise<boolean> => {
  const result = await checkSubscriptionStatus();
  return result.isPremium;
};

export const setSubscriptionStatus = async (isPremium: boolean): Promise<void> => {
  try {
    const currentUser = await getCurrentUser();
    if (!currentUser) return;

    await AsyncStorage.setItem(`subscription_${currentUser.id}`, isPremium ? 'premium' : 'free');
  } catch (error) {
    console.error('Erreur mise √† jour abonnement:', error);
  }
};

export const getCurrentSubscription = async (userId: string): Promise<Subscription> => {
  try {
    console.log('üîç R√©cup√©ration abonnement pour:', userId);

    // R√©cup√©rer depuis le serveur VPS
    const response = await fetch(`${process.env.EXPO_PUBLIC_VPS_URL}/api/subscription/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      const subscriptionData = await response.json();
      console.log('üîç Donn√©es d\'abonnement r√©cup√©r√©es:', subscriptionData);

      if (subscriptionData.isPremium && subscriptionData.planId && subscriptionData.planId !== 'free') {
        const plan = SUBSCRIPTION_PLANS.find(p => p.id === subscriptionData.planId);
        if (plan) {
          const subscription = {
            planId: subscriptionData.planId,
            planName: plan.name,
            status: 'active',
            price: plan.price,
            currency: 'EUR',
            paymentMethod: subscriptionData.paymentMethod || 'none'
          };

          console.log('üíé Configuration abonnement premium:', subscription);
          return subscription;
        }
      }
    }

    // Fallback sur le plan gratuit
    const freeSubscription = {
      planId: 'free',
      planName: 'Version Gratuite',
      status: 'active',
      price: 0,
      currency: 'EUR',
      paymentMethod: 'none'
    };

    console.log('üÜì Utilisation du plan gratuit par d√©faut');
    return freeSubscription;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration abonnement:', error);

    // Fallback sur le plan gratuit
    const freeSubscription = {
      planId: 'free',
      planName: 'Version Gratuite', 
      status: 'active',
      price: 0,
      currency: 'EUR',
      paymentMethod: 'none'
    };

    console.log('üÜì Fallback vers plan gratuit apr√®s erreur');
    return freeSubscription;
  }
};