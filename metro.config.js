
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

// Configuration simplifi√©e pour √©viter les erreurs de r√©solution
config.resolver.platforms = ['ios', 'android', 'native', 'web'];

// Liste des modules √† ignorer ou mocker
const modulesToMock = [
  '@stripe/stripe-react-native',
  'expo-health-kit',
  '@react-native-masked-view/masked-view'
];

// R√©solution conditionnelle am√©lior√©e
config.resolver.resolveRequest = (context, moduleName, platform) => {
  console.log(`üîç R√©solution: ${moduleName} pour ${platform}`);
  
  try {
    // V√©rification de la validit√© des param√®tres
    if (typeof moduleName !== 'string' || !moduleName) {
      console.warn('‚ö†Ô∏è Nom de module invalide:', moduleName);
      return null;
    }

    // Mock sp√©cifique pour Stripe sur web
    if (platform === 'web' && moduleName.includes('@stripe/stripe-react-native')) {
      try {
        const mockPath = require.resolve('./utils/stripe-web-mock.js');
        console.log('‚úÖ Utilisation du mock Stripe pour web');
        return {
          filePath: mockPath,
          type: 'sourceFile',
        };
      } catch (error) {
        console.warn('‚ö†Ô∏è Mock Stripe non trouv√©:', error.message);
      }
    }

    // Mock pour les modules probl√©matiques sur web
    if (platform === 'web' && modulesToMock.some(mod => moduleName.includes(mod))) {
      try {
        const mockPath = require.resolve('./utils/stripe-web-mock.js');
        console.log(`‚úÖ Utilisation du mock g√©n√©rique pour ${moduleName} sur web`);
        return {
          filePath: mockPath,
          type: 'sourceFile',
        };
      } catch (error) {
        console.warn(`‚ö†Ô∏è Mock g√©n√©rique non trouv√© pour ${moduleName}:`, error.message);
      }
    }

    // R√©solution par d√©faut avec v√©rification
    const result = context.resolveRequest(context, moduleName, platform);
    
    // V√©rifier que le r√©sultat est valide
    if (result && result.filePath && typeof result.filePath === 'string') {
      return result;
    } else {
      console.warn('‚ö†Ô∏è R√©solution invalide pour:', moduleName, result);
      return null;
    }
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è Erreur de r√©solution pour ${moduleName}:`, error.message);
    // Retourner null au lieu d'undefined pour √©viter l'erreur path.relative
    return null;
  }
};

module.exports = config;
